<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>随便测试一下</title>
    <url>/2019/12/27/%E8%81%8A%E5%A4%A9/</url>
    <content><![CDATA[<h2 id="aproxy"><a href="#aproxy" class="headerlink" title="aproxy"></a>aproxy</h2><p>自用的一个网络代理。支持http/https代理以及socks4/5协议的tcp代理部分。</p>
<p>传输使用aes加密，密钥在配置文件中设置。可以使用tcp直连或者使用websocket协议传输。如使用websocket可以注册一个域名并使用cloudflare提供的免费cdn服务。</p>
<p>支持多级代理，如安装了tor，可在服务端配置下一级代理为tor (localhost:9050)</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"plugin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//加载动态库</span></span><br><span class="line">	p, err := plugin.Open(<span class="string">"plugin.so"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//查找函数</span></span><br><span class="line">	f, err := p.Lookup(<span class="string">"DCall"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//转换类型后调用函数</span></span><br><span class="line">	f.(<span class="function"><span class="keyword">func</span><span class="params">()</span>)<span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">	f2, err := p.Lookup(<span class="string">"DCallWithParam"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//带参函数的调用</span></span><br><span class="line">	f2.(func(string))("hello world,plugin.so")</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h4 id="简单使用说明"><a href="#简单使用说明" class="headerlink" title="简单使用说明"></a>简单使用说明</h4><p><strong>获取</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get -u github.com/treant5612/aproxy</span><br></pre></td></tr></table></figure>

<p><strong>作为服务端</strong></p>
<p>使用 aproxy -s 来生成服务端配置文件config.txt ，然后运行。</p>
<p>默认端口为10808 和 80 (websocket),可以在配置文件中修改。(需要注意防火墙/安全组配置，此外如需使用1024以下的端口需root权限)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/go/bin</span><br><span class="line">./aproxy -s -key yourkey</span><br><span class="line">nohup ./aproxy &amp;</span><br></pre></td></tr></table></figure>

<p><strong>作为客户端</strong></p>
<p>使用aproxy -c 来生成客户端配置文件模板，修改其中的地址和key与服务端相对应之后直接运行即可。</p>
<p>推荐与chrome插件SwitchyOmega配合使用。</p>
<p>在windows下需要后台运行可以使用</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell.exe <span class="literal">-WindowStyle</span> <span class="keyword">Hidden</span> <span class="literal">-c</span> ./aproxy.exe</span><br></pre></td></tr></table></figure>


<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p><strong>客户端</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Proxy]</span><br><span class="line">	# windows下是否修改系统代理设置</span><br><span class="line">	AutoProxy&#x3D;false</span><br><span class="line"></span><br><span class="line">	## Filter指定需要代理的规则列表</span><br><span class="line">	Filter&#x3D;gfwlist.txt</span><br><span class="line"></span><br><span class="line">	## SocksLocal 项设置为true时仅监听来自本机的代理请求</span><br><span class="line">	SocksLocal&#x3D;false</span><br><span class="line">	</span><br><span class="line">	## 代理端口</span><br><span class="line">	SocksPort&#x3D;10809</span><br><span class="line"></span><br><span class="line">[Tunnel]</span><br><span class="line">	## 数据传输类型 可选项为tcp &#x2F; websocket 对应服务器配置中的Server&#x2F;WebsocketServer</span><br><span class="line">	Type&#x3D;websocket</span><br><span class="line"></span><br><span class="line">	## 加密密钥，取其hash作为aes加密的实际密钥</span><br><span class="line">	Key     &#x3D;defaultKey</span><br><span class="line">	</span><br><span class="line">	## 如果是websocket类型地址应当设置为 ws:&#x2F;&#x2F;host:port&#x2F;ws </span><br><span class="line">	Address &#x3D;ws:&#x2F;&#x2F;192.168.137.1:80&#x2F;ws</span><br><span class="line">	Port    &#x3D;80</span><br></pre></td></tr></table></figure>

<p><strong>服务端</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#设置密钥以及端口</span><br><span class="line">[Server]</span><br><span class="line">	Key  &#x3D;defaultKey</span><br><span class="line">	Port &#x3D;10808</span><br><span class="line">[WebsocketServer]</span><br><span class="line">    Key&#x3D;defaultKey</span><br><span class="line">    Port&#x3D;80</span><br><span class="line"></span><br><span class="line">#下一级socks代理 比如向tor转发</span><br><span class="line">#[Forward]</span><br><span class="line">#    Address&#x3D;localhost:9050</span><br></pre></td></tr></table></figure>



<h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p>release中提供了一个暂时可用的客户端配置。</p>
<p>安卓/ios设备可以在wifi页面点击最右的<code>&gt;</code>或<code>!</code>符号来配置一个局域网内的HTTP代理。</p>
]]></content>
  </entry>
</search>
